<?php
// Inicia a sessão PHP para permitir a persistência de dados entre as requisições HTTP
session_start();

$questions = [
    1 => [
        'domain' => 'Server-Side Request Forgery (SSRF)',
        'question' => 'Which of the following scenarios describes a Server-Side Request Forgery (SSRF) attack?',
        'options' => [
            'A' => 'An attacker sends a malicious file to be executed on the server.',
            'B' => 'An attacker manipulates the server to make HTTP requests to internal resources.',
            'C' => 'An attacker injects code into an SQL query to access sensitive data.',
            'D' => 'An attacker tricks the user into submitting a malicious request.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'This describes malicious file execution, not SSRF.',
            'B' => 'Correct. SSRF occurs when the server is tricked into making requests to internal resources.',
            'C' => 'This describes SQL Injection, not SSRF.',
            'D' => 'This is a description of CSRF, not SSRF.',
        ],
    ],
    2 => [
        'domain' => 'Insecure Direct Object Reference (IDOR)',
        'question' => 'What is the most effective way to prevent Insecure Direct Object References (IDOR)?',
        'options' => [
            'A' => 'Encrypting all object references in URLs.',
            'B' => 'Implementing proper access control checks on the server.',
            'C' => 'Obfuscating database table names.',
            'D' => 'Validating user input at the client side.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Encryption alone does not ensure access control.',
            'B' => 'Correct. Access control checks prevent unauthorized access.',
            'C' => 'Obfuscation is not a security measure.',
            'D' => 'Client-side validation is insufficient as it can be bypassed.',
        ],
    ],
    3 => [
        'domain' => 'Authentication Vulnerabilities',
        'question' => 'What is a primary risk of allowing weak password policies?',
        'options' => [
            'A' => 'Increased susceptibility to brute force attacks.',
            'B' => 'Exposure to SQL Injection.',
            'C' => 'Mitigation of Cross-Site Scripting.',
            'D' => 'Protection against IDOR vulnerabilities.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Weak password policies make brute force attacks easier to execute.',
            'B' => 'SQL Injection does not relate to password strength.',
            'C' => 'Weak passwords do not mitigate XSS.',
            'D' => 'IDOR vulnerabilities are unrelated to password strength.',
        ],
    ],
    4 => [
        'domain' => 'Input Validation',
        'question' => 'Which practice strengthens input validation?',
        'options' => [
            'A' => 'Using a whitelist approach.',
            'B' => 'Storing input as plain text.',
            'C' => 'Allowing all special characters.',
            'D' => 'Using GET requests for sensitive data.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. A whitelist approach ensures only allowed inputs are processed.',
            'B' => 'Storing input as plain text does not strengthen validation.',
            'C' => 'Allowing all special characters increases risks.',
            'D' => 'GET requests for sensitive data do not address input validation.',
        ],
    ],
    5 => [
        'domain' => 'Cross-Site Scripting (XSS)',
        'question' => 'Which technique is most effective in preventing XSS attacks?',
        'options' => [
            'A' => 'User input sanitization.',
            'B' => 'Configuring X-Frame-Options header.',
            'C' => 'Using POST methods instead of GET.',
            'D' => 'Server data compression.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Sanitizing user inputs removes malicious content before processing.',
            'B' => 'X-Frame-Options prevents Clickjacking, not XSS.',
            'C' => 'POST vs GET does not directly prevent XSS.',
            'D' => 'Compression is unrelated to XSS prevention.',
        ],
    ],
    6 => [
        'domain' => 'Security Headers',
        'question' => 'Which HTTP security header can help prevent Clickjacking attacks?',
        'options' => [
            'A' => 'Content-Security-Policy with script-src.',
            'B' => 'X-Frame-Options with DENY.',
            'C' => 'Strict-Transport-Security with max-age.',
            'D' => 'X-Content-Type-Options with nosniff.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Content-Security-Policy script-src controls script sources, not frame embedding.',
            'B' => 'Correct. X-Frame-Options prevents Clickjacking by controlling frame embedding.',
            'C' => 'Strict-Transport-Security enforces HTTPS, unrelated to Clickjacking.',
            'D' => 'X-Content-Type-Options prevents MIME sniffing, not Clickjacking.',
        ],
    ],
    7 => [
        'domain' => 'TLS Security',
        'question' => 'Which vulnerability arises when a TLS certificate is self-signed?',
        'options' => [
            'A' => 'Susceptibility to man-in-the-middle (MITM) attacks.',
            'B' => 'Credential exposure.',
            'C' => 'SQL Injection.',
            'D' => 'Cross-Site Scripting.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Self-signed certificates lack trust from browsers, enabling MITM attacks.',
            'B' => 'Credential exposure is not directly related to self-signed certificates.',
            'C' => 'SQL Injection targets databases, unrelated to certificates.',
            'D' => 'Cross-Site Scripting affects client-side scripts, not TLS.',
        ],
    ],
    8 => [
        'domain' => 'Common Supply Chain Attacks',
        'question' => 'What is a common characteristic of a supply chain attack?',
        'options' => [
            'A' => 'Tampering with third-party software dependencies.',
            'B' => 'Exploiting SQL Injection.',
            'C' => 'Injecting malware via phishing emails.',
            'D' => 'Enumerating open ports on a server.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Supply chain attacks often target third-party dependencies to compromise systems indirectly.',
            'B' => 'SQL Injection directly targets databases.',
            'C' => 'Phishing is unrelated to supply chain attacks.',
            'D' => 'Port enumeration is a reconnaissance technique.',
        ],
    ],
    9 => [
        'domain' => 'Directory Traversal Vulnerabilities',
        'question' => 'Which path indicates a possible Directory Traversal attack?',
        'options' => [
            'A' => '/login.html.',
            'B' => '../../etc/passwd.',
            'C' => '/index.php?user=1.',
            'D' => '/api/v1/users.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'This is a legitimate file path.',
            'B' => 'Correct. ../../etc/passwd is a common directory traversal payload used to access sensitive files.',
            'C' => 'This is a normal query string.',
            'D' => 'This is a typical API endpoint, not a traversal attempt.',
        ],
    ],
    10 => [
        'domain' => 'Business Logic Flaws',
        'question' => 'Which of the following is an example of a business logic flaw?',
        'options' => [
            'A' => 'Manipulating discount values of a product in the application.',
            'B' => 'Injecting malicious code.',
            'C' => 'Tampering with session cookies.',
            'D' => 'Scanning open server ports.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Business logic flaws exploit application-specific processes, such as modifying discounts.',
            'B' => 'Injecting malicious code is typically a technical vulnerability, not a business logic issue.',
            'C' => 'Tampering with session cookies is unrelated to business logic.',
            'D' => 'Port scanning is an external reconnaissance technique.',
        ],
    ],
    11 => [
        'domain' => 'Insecure File Uploads',
        'question' => 'What is the primary risk associated with allowing unrestricted file uploads to a web application?',
        'options' => [
            'A' => 'Overloading the application server',
            'B' => 'Execution of malicious code on the server',
            'C' => 'Disclosure of sensitive data',
            'D' => 'Increased storage costs',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Overloading the server is not the primary risk.',
            'B' => 'Correct. Malicious code execution is a significant risk of unrestricted uploads.',
            'C' => 'While possible, this is not the primary risk.',
            'D' => 'Storage costs are not directly related to security risks.',
        ],
    ],
    12 => [
       'domain' => 'Code Injection Vulnerabilities',
        'question' => 'Which of the following is an example of a Code Injection vulnerability?',
        'options' => [
            'A' => '<script>alert(\'XSS\')</script>',
            'B' => 'os.system(\'rm -rf /\') executed through user input',
            'C' => '/etc/passwd being exposed through a traversal attack',
            'D' => 'SQL Injection payload like \' OR \'1\'=\'1\'; --',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'This is an XSS attack, not code injection.',
            'B' => 'Correct. Executing system commands via user input is a Code Injection vulnerability.',
            'C' => 'This is a Directory Traversal attack.',
            'D' => 'This describes SQL Injection, not code injection.',
        ],
    ],
    13 => [
       'domain' => 'Business Logic Flaws',
        'question' => 'Which of the following is a typical indicator of a Business Logic Flaw in an e-commerce platform?',
        'options' => [
            'A' => 'User is able to add negative quantities of an item to the cart.',
            'B' => 'Input data is not sanitized, leading to an XSS attack.',
            'C' => 'Database queries are vulnerable to SQL Injection.',
            'D' => 'Application exposes unencrypted sensitive data.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Adding negative quantities indicates a Business Logic Flaw.',
            'B' => 'This describes an XSS vulnerability.',
            'C' => 'This is a SQL Injection vulnerability.',
            'D' => 'This is a data exposure issue, not a logic flaw.',
        ],
    ],
    14 => [
        'domain' => 'Directory Traversal Vulnerabilities',
        'question' => 'A directory traversal vulnerability occurs when:',
        'options' => [
            'A' => 'The application fails to validate or sanitize path inputs, allowing access to unauthorized files.',
            'B' => 'The application discloses directory structures in error messages.',
            'C' => 'The server’s directory listing is enabled, exposing sensitive files.',
            'D' => 'A malicious file is uploaded and executed on the server.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Directory traversal allows unauthorized file access through manipulated paths.',
            'B' => 'Disclosing directory structures is an information disclosure vulnerability.',
            'C' => 'Enabled directory listing is a misconfiguration.',
            'D' => 'This describes a file upload vulnerability, not directory traversal.',
        ],
    ],
    15 => [
        'domain' => 'Security Misconfigurations',
        'question' => 'Which of the following is an example of a Security Misconfiguration?',
        'options' => [
            'A' => 'Using a weak password hashing algorithm',
            'B' => 'Leaving the admin panel accessible without authentication',
            'C' => 'Allowing sensitive data exposure through error messages',
            'D' => 'All of the above',
        ],
        'correct_answer' => 'D',
        'all_explanations' => [
            'A' => 'Weak hashing algorithms increase vulnerability to brute force attacks.',
            'B' => 'An unprotected admin panel is a severe security misconfiguration.',
            'C' => 'Error messages can disclose sensitive information.',
            'D' => 'Correct. All these options are examples of security misconfigurations.',
        ],
    ],
    16 => [
        'domain' => 'Information Disclosure',
        'question' => 'What is a common way information disclosure vulnerabilities occur?',
        'options' => [
            'A' => 'Lack of encryption during data transmission',
            'B' => 'Including detailed error messages in production',
            'C' => 'Using outdated TLS protocols',
            'D' => 'All of the above',
        ],
        'correct_answer' => 'D',
        'all_explanations' => [
            'A' => 'Lack of encryption can expose sensitive data during transmission.',
            'B' => 'Detailed error messages may reveal sensitive implementation details.',
            'C' => 'Outdated TLS protocols are vulnerable to exploitation.',
            'D' => 'Correct. All these scenarios can lead to information disclosure.',
        ],
    ],
    17 => [
        'domain' => 'Vulnerable and Outdated Components',
        'question' => 'Why is using outdated components in an application a security risk?',
        'options' => [
            'A' => 'They may contain known vulnerabilities that attackers can exploit.',
            'B' => 'They slow down the performance of the application.',
            'C' => 'They are less compatible with modern browsers.',
            'D' => 'They increase maintenance costs.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Outdated components often have known vulnerabilities.',
            'B' => 'While performance may be affected, the primary concern is security.',
            'C' => 'Compatibility issues are secondary to security risks.',
            'D' => 'Maintenance costs are unrelated to immediate security risks.',
        ],
    ],
    18 => [
        'domain' => 'Common Supply Chain Attacks',
        'question' => 'Which of the following is an example of a supply chain attack?',
        'options' => [
            'A' => 'Exploiting a zero-day vulnerability in a web application',
            'B' => 'Compromising a software dependency used by the application',
            'C' => 'Gaining access through weak password policies',
            'D' => 'Stealing session tokens via XSS',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'A zero-day vulnerability is unrelated to supply chain attacks.',
            'B' => 'Correct. Compromising dependencies is a common supply chain attack method.',
            'C' => 'Weak password policies are unrelated to supply chain attacks.',
            'D' => 'Session token theft is typically a result of XSS, not a supply chain attack.',
        ],
    ],
    19 => [
       'domain' => 'Insecure Direct Object Reference (IDOR)',
        'question' => 'A Privilege Escalation attack typically occurs when:',
        'options' => [
            'A' => 'A user gains unauthorized access to higher-level resources or functionality.',
            'B' => 'A user manipulates cookies to remain logged in after session expiration.',
            'C' => 'A session ID is exposed in a URL.',
            'D' => 'An attacker guesses weak passwords to gain access.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Privilege Escalation allows unauthorized access to sensitive resources.',
            'B' => 'Cookie manipulation is not directly related to privilege escalation.',
            'C' => 'Exposed session IDs are an information disclosure vulnerability.',
            'D' => 'Weak password guessing relates to brute force attacks.',
        ],
    ],
    20 => [
        'domain' => 'TLS Security',
        'question' => 'Which of the following best describes the difference between symmetric and asymmetric ciphers in TLS?',
        'options' => [
            'A' => 'Symmetric ciphers use the same key for encryption and decryption, while asymmetric ciphers use a key pair (public and private).',
            'B' => 'Symmetric ciphers are less secure than asymmetric ciphers.',
            'C' => 'Asymmetric ciphers are used to encrypt large amounts of data directly.',
            'D' => 'Symmetric ciphers cannot be used in TLS.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Symmetric encryption uses a single key, while asymmetric encryption uses a key pair.',
            'B' => 'Symmetric ciphers are not necessarily less secure; they serve different purposes.',
            'C' => 'Asymmetric encryption is computationally expensive and not used for large data encryption.',
            'D' => 'Symmetric ciphers are commonly used in TLS for efficiency after the handshake.',
        ],
    ],
    21 => [
       'domain' => 'Security Headers',
        'question' => 'Which of the following headers helps in preventing the Clickjacking attack?',
        'options' => [
            'A' => 'Strict-Transport-Security',
            'B' => 'Access-Control-Allow-Origin',
            'C' => 'X-Frame-Options',
            'D' => 'X-Content-Type-Options',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'Strict-Transport-Security enforces HTTPS but does not prevent Clickjacking.',
            'B' => 'Access-Control-Allow-Origin sets CORS policies, unrelated to Clickjacking.',
            'C' => 'Correct. X-Frame-Options prevents Clickjacking by controlling frame embedding.',
            'D' => 'X-Content-Type-Options prevents MIME sniffing, not Clickjacking.',
        ],
    ],
     22 => [
        'domain' => 'JWT (JSON Web Token)',
        'question' => 'In the context of the following JWT token, which of the following statement is true?',
        'details' => 'JWT Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2Vjb3BzIn0.mnOVNwT4Gi-AtqoTmo7rm7OV1I2wCdKMi_S1_bPg_G0',
        'options' => [
            'A' => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 represents a JWT Signature.',
            'B' => 'mnOVNwT4Gi-AtqoTmo7rm7OV1I2wCdKMi_S1_bPg_G0 represents a JWT Signature.',
            'C' => 'eyJuYW1lIjoiU2Vjb3BzIn0 represents a JWT Signature.',
            'D' => 'None of the above.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'The first part is the header, not the signature.',
            'B' => 'Correct. The third part of the JWT token represents the signature.',
            'C' => 'The second part is the payload, not the signature.',
            'D' => 'This statement is incorrect as the signature is represented in option B.',
        ],
    ],
     23 => [
        'domain' => 'Server Information Disclosure',
        'question' => 'Based on the fragment below, which of the following statements is true?',
        'details' => 'HTTP/1.1 200 OK | Accept-Ranges: bytes | Age: 359987 | Cache-Control: max-age=604800 | Content-Type: text/html; charset=UTF-8 | Date: Fri, 02 Dec 2022 18:33:05 GMT | Expires: Fri, 09 Dec 2022 18:33:05 GMT | Last-Modified: Mon, 28 Nov 2022 14:33:18 GMT | Server: Microsoft-IIS/6.0 | X-AspNet-Version: 2.0.50727 | Vary: Accept-Encoding | X-Powered-By: ASP.NET | Content-Length: 1256
',
        'options' => [
            'A' => 'The application is using an outdated server technology.',
            'B' => 'The application is disclosing the server version.',
            'C' => 'The application is disclosing the version of the framework used.',
            'D' => 'All of the above.',
        ],
        'correct_answer' => 'D',
        'all_explanations' => [
            'A' => 'Correct. Microsoft-IIS/6.0 is an outdated server technology.',
            'B' => 'Correct. The server version is explicitly disclosed.',
            'C' => 'Correct. The application discloses the .NET framework version.',
            'D' => 'All the above statements are true.',
        ],
    ],
    24 => [
        'domain' => 'Content-Security-Policy (CSP)',
        'question' => 'Which of the following directives in a Content-Security-Policy HTTP response header can be used to prevent a Clickjacking attack?',
        'options' => [
            'A' => 'script-src',
            'B' => 'object-src',
            'C' => 'frame-ancestors',
            'D' => 'base-uri',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'script-src controls allowed script sources, unrelated to Clickjacking.',
            'B' => 'object-src controls object sources, not frame embedding.',
            'C' => 'Correct. frame-ancestors specifies which sources can embed the content in frames.',
            'D' => 'base-uri specifies allowed base URIs, unrelated to Clickjacking.',
        ],
    ],
    25 => [
        'domain' => 'TLS Security',
        'question' => 'Which of the following SSL/TLS protocols are considered to be insecure?',
        'options' => [
            'A' => 'SSLv2 and SSLv3',
            'B' => 'TLSv1.0 and TLSv1.1',
            'C' => 'Both A and B',
            'D' => 'SSLv2, SSLv3, TLSv1.0, TLSv1.1, TLSv1.2, and TLSv1.3',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'SSLv2 and SSLv3 are outdated and insecure.',
            'B' => 'TLSv1.0 and TLSv1.1 are outdated and insecure.',
            'C' => 'Correct. Both SSLv2/SSLv3 and TLSv1.0/TLSv1.1 are insecure.',
            'D' => 'TLSv1.2 and TLSv1.3 are considered secure.',
        ],
    ],
    26 => [
        'domain' => 'Insecure Direct Object Reference (IDOR)',
        'question' => 'After purchasing an item on an e-commerce website, a user can view their order details by visiting a URL. A security researcher points out that manipulating the order_id value allows viewing arbitrary orders. Which of the following is correct regarding the fixes?',
        'details' => 'Bob\'s Fix: SHA1 hashing of order_id | John\'s Fix: Base64 encoding of order_id.',
        'options' => [
            'A' => 'Both solutions are adequate to fix the problem.',
            'B' => 'Both solutions are inadequate and the vulnerability is still not fixed.',
            'C' => 'Only John\'s solution fixes the problem.',
            'D' => 'Only Bob\'s solution fixes the problem.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Both fixes are inadequate as they focus on obfuscation, not security.',
            'B' => 'Correct. Neither hashing nor encoding prevents unauthorized access.',
            'C' => 'Base64 encoding only obfuscates the ID, which is reversible.',
            'D' => 'SHA1 hashing also does not prevent unauthorized access without proper validation.',
        ],
    ],
    27 => [
        'domain' => 'Cross-Site Request Forgery (CSRF)',
        'question' => 'Which of the following is the most effective mitigation for CSRF attacks?',
        'options' => [
            'A' => 'Requiring a CAPTCHA for every request.',
            'B' => 'Implementing SameSite cookies and including CSRF tokens.',
            'C' => 'Encrypting all cookies.',
            'D' => 'Disabling JavaScript on the client-side.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'CAPTCHA can provide some protection but is not a standard mitigation.',
            'B' => 'Correct. CSRF tokens and SameSite cookies effectively prevent CSRF.',
            'C' => 'Encrypting cookies does not address CSRF.',
            'D' => 'Disabling JavaScript is not a practical solution.',
        ],
    ],
    28 => [
        'domain' => 'Encoding, Encryption, and Hashing',
        'question' => 'What is the primary difference between hashing and encryption?',
        'options' => [
            'A' => 'Hashing is reversible, encryption is not.',
            'B' => 'Hashing ensures confidentiality, encryption ensures integrity.',
            'C' => 'Hashing is a one-way process, while encryption is two-way.',
            'D' => 'Hashing is used to protect data in transit, encryption is for data at rest.',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'Hashing is not reversible, encryption is.',
            'B' => 'Hashing ensures integrity, not confidentiality.',
            'C' => 'Correct. Hashing is one-way, encryption allows decryption.',
            'D' => 'Both hashing and encryption can be used for different purposes.',
        ],
    ],
    29 => [
        'domain' => 'Authentication Vulnerabilities',
        'question' => 'Which of the following represents a secure password policy?',
        'options' => [
            'A' => 'Allowing passwords with a minimum of 6 characters.',
            'B' => 'Requiring multi-factor authentication (MFA) along with strong passwords.',
            'C' => 'Limiting password complexity to ease user experience.',
            'D' => 'Storing passwords in plaintext for easy retrieval.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'A 6-character minimum is too short for strong passwords.',
            'B' => 'Correct. MFA with strong passwords enhances security.',
            'C' => 'Reducing complexity compromises password strength.',
            'D' => 'Storing plaintext passwords is insecure.',
        ],
    ],
    30 => [
        'domain' => 'SQL Injection',
        'question' => 'Which method is the most secure to prevent SQL Injection attacks?',
        'options' => [
            'A' => 'Escaping all user inputs.',
            'B' => 'Using prepared statements with parameterized queries.',
            'C' => 'Limiting database permissions for users.',
            'D' => 'Enabling detailed SQL error messages.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Escaping inputs helps but is not foolproof.',
            'B' => 'Correct. Prepared statements prevent injection.',
            'C' => 'While important, permission limits do not directly prevent injection.',
            'D' => 'Detailed errors can aid attackers.',
        ],
    ],
    31 => [
        'domain' => 'Security Misconfigurations',
        'question' => 'Which of the following is an example of a common security misconfiguration?',
        'options' => [
            'A' => 'Leaving default credentials unchanged.',
            'B' => 'Implementing HTTPS across all pages.',
            'C' => 'Using strong passwords for admin accounts.',
            'D' => 'Restricting database access to the application server only.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Default credentials are a common security flaw.',
            'B' => 'This is a security best practice.',
            'C' => 'Strong passwords are a security measure.',
            'D' => 'Restricting access is also a best practice.',
        ],
    ],
    32 => [
         'domain' => 'Insecure File Uploads',
        'question' => 'Which of the following measures is most effective in mitigating risks from insecure file uploads?',
        'options' => [
            'A' => 'Limiting file size to under 1MB.',
            'B' => 'Validating the file type using both MIME type and file content.',
            'C' => 'Allowing users to upload any file type for convenience.',
            'D' => 'Storing uploaded files in the root web directory.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'File size limitation does not address file type security.',
            'B' => 'Correct. File type validation ensures files are not malicious.',
            'C' => 'Allowing all file types is insecure.',
            'D' => 'Storing files in the web root exposes them to direct access.',
        ],
    ],
    33 => [
        'domain' => 'Privilege Escalation',
        'question' => 'How can an attacker exploit privilege escalation vulnerabilities?',
        'options' => [
            'A' => 'By gaining access to sensitive logs via improper file permissions.',
            'B' => 'By accessing administrative functions without proper validation.',
            'C' => 'By exploiting software vulnerabilities to bypass restrictions.',
            'D' => 'All of the above.',
        ],
        'correct_answer' => 'D',
        'all_explanations' => [
            'A' => 'Incorrect file permissions can lead to escalation.',
            'B' => 'Accessing admin functions is a privilege escalation method.',
            'C' => 'Exploiting software vulnerabilities can escalate privileges.',
            'D' => 'Correct. All listed options are methods of privilege escalation.',
        ],
    ],
    34 => [
        'domain' => 'Information Disclosure',
        'question' => 'What is the primary security risk of exposing detailed error messages in a production environment?',
        'options' => [
            'A' => 'Improper error handling.',
            'B' => 'Exposing sensitive implementation details.',
            'C' => 'Making debugging easier for developers.',
            'D' => 'Slowing down application performance.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Improper error handling is a related but broader issue.',
            'B' => 'Correct. Detailed errors can reveal sensitive details to attackers.',
            'C' => 'While debugging is easier, it compromises security.',
            'D' => 'Performance is not directly related to error disclosure.',
        ],
    ],
    35 => [
        'domain' => 'Business Logic Flaws',
        'question' => 'Which of the following is an example of exploiting a business logic flaw?',
        'options' => [
            'A' => 'Ordering negative quantities of an item for a refund.',
            'B' => 'Executing a command via injected code.',
            'C' => 'Bypassing authentication via brute force.',
            'D' => 'Exploiting weak TLS encryption.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Negative quantities exploit business rules.',
            'B' => 'This describes code injection.',
            'C' => 'Brute force targets authentication, not business logic.',
            'D' => 'TLS encryption is unrelated to business logic flaws.',
        ],
    ],
    36 => [
         'domain' => 'XML External Entity (XXE) Attack',
        'question' => 'Which of the following measures mitigates XML External Entity (XXE) attacks?',
        'options' => [
            'A' => 'Disabling external entity processing in XML parsers.',
            'B' => 'Validating all XML input against a whitelist.',
            'C' => 'Storing XML files in encrypted format.',
            'D' => 'Allowing only local file paths in XML configurations.',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. Disabling entity processing eliminates XXE risks.',
            'B' => 'Validation is good but does not directly address XXE.',
            'C' => 'Encryption protects stored files but does not mitigate parsing vulnerabilities.',
            'D' => 'Restricting paths does not address all XXE attack vectors.',
        ],
    ],
    37 => [
        'domain' => 'Security Best Practices and Hardening Mechanisms',
        'question' => 'A developer is configuring a web application and needs to ensure security best practices for cookie handling. After consulting security guidelines, they configure cookies with attributes: Secure, HttpOnly, and SameSite=Lax. Which of the following is true about the effectiveness of these settings?',
        'details' => 'Attributes Applied: Secure, HttpOnly, SameSite=Lax',
        'options' => [
            'A' => 'These settings will completely prevent all session hijacking attacks.',
            'B' => 'SameSite=Lax mitigates CSRF risks, while HttpOnly protects against XSS cookie theft.',
            'C' => 'The Secure attribute encrypts cookies stored in the browser.',
            'D' => 'SameSite=Lax allows cookies to be accessed from any origin.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'These settings reduce risks but do not provide complete protection.',
            'B' => 'Correct. These attributes address CSRF and XSS risks effectively.',
            'C' => 'Secure ensures cookies are sent over HTTPS, not encryption.',
            'D' => 'SameSite=Lax restricts cookies to same-site requests except top-level navigation.',
        ],
    ],
    38 => [
        'domain' => 'Common Supply Chain Attacks',
        'question' => 'A development team incorporates an open-source library into their project. Months later, an update introduces malicious code that exfiltrates sensitive user data. Which supply chain vulnerability was exploited?',
        'details' => 'Scenario: Open-source library update with malicious payload.',
        'options' => [
            'A' => 'Man-in-the-middle attack during library download.',
            'B' => 'Backdoored dependency in the supply chain.',
            'C' => 'Privilege escalation in the server environment.',
            'D' => 'SQL Injection vulnerability in the library.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'A man-in-the-middle attack happens during data transit, not updates.',
            'B' => 'Correct. A backdoored dependency introduced malicious functionality.',
            'C' => 'Privilege escalation affects local users, not dependencies.',
            'D' => 'SQL Injection is unrelated to this scenario.',
        ],
    ],
    39 => [
        'domain' => 'Vulnerable and Outdated Components',
        'question' => 'An organization uses a web application built on an outdated PHP version no longer receiving security updates. What risk does this pose?',
        'details' => 'Environment: PHP 5.6, last updated in 2018, used in production.',
        'options' => [
            'A' => 'Increased performance issues due to legacy code.',
            'B' => 'Exposure to unpatched vulnerabilities exploited by attackers.',
            'C' => 'Incompatibility with modern browsers.',
            'D' => 'Reduced SEO rankings due to outdated technology.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Performance issues are secondary to security concerns.',
            'B' => 'Correct. Unpatched vulnerabilities are a significant risk.',
            'C' => 'Browser compatibility is not directly related to PHP.',
            'D' => 'SEO impact is irrelevant to security.',
        ],
    ],
    40 => [
        'domain' => 'Code Injection Vulnerabilities',
        'question' => 'A web application allows users to upload JSON configuration files, which are later parsed and executed. A security researcher uploads a file containing malicious JavaScript, which is executed server-side. What vulnerability does this represent?',
        'details' => 'Uploaded File: {"command": "eval(\'console.log(1+1)\')"}',
        'options' => [
            'A' => 'Cross-Site Scripting (XSS).',
            'B' => 'Code Injection.',
            'C' => 'Directory Traversal.',
            'D' => 'SQL Injection.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'XSS occurs on the client side, not server side.',
            'B' => 'Correct. Executing user-provided code is a Code Injection vulnerability.',
            'C' => 'Directory Traversal involves unauthorized file access, not code execution.',
            'D' => 'SQL Injection targets databases, not application logic.',
        ],
    ],
    41 => [
        'domain' => 'Authentication Vulnerabilities',
        'question' => 'A web application uses an authentication system that locks an account after 5 failed login attempts. An attacker scripts attempts against multiple accounts, avoiding lockouts. What vulnerability does this represent?',
        'details' => 'Attack Method: Trying one password per account in a dictionary.',
        'options' => [
            'A' => 'Brute Force Attack.',
            'B' => 'Credential Stuffing.',
            'C' => 'Password Spraying.',
            'D' => 'Privilege Escalation.',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'Brute force typically involves repeated attempts on one account.',
            'B' => 'Credential stuffing uses leaked credentials, not guesses.',
            'C' => 'Correct. Password spraying avoids lockouts by targeting multiple accounts.',
            'D' => 'Privilege escalation involves gaining higher access, not login attempts.',
        ],
    ],
    42 => [
        'domain' => 'Directory Traversal Vulnerabilities',
        'question' => 'A web application allows users to download reports by specifying a file path in the URL. A researcher bypasses the intended file directory and accesses `/etc/passwd`. What best describes this issue?',
        'details' => 'URL: https://example.com/download?file=../../etc/passwd',
        'options' => [
            'A' => 'SQL Injection.',
            'B' => 'Directory Traversal.',
            'C' => 'Privilege Escalation.',
            'D' => 'Server-Side Request Forgery (SSRF).',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'SQL Injection targets databases, not files.',
            'B' => 'Correct. Directory Traversal allows accessing unauthorized files.',
            'C' => 'Privilege escalation involves gaining elevated access, not file access.',
            'D' => 'SSRF manipulates server requests, not file paths.',
        ],
    ],
    43 => [
        'domain' => 'TLS Security',
        'question' => 'An e-commerce website uses a TLS certificate issued to "example.com", but customers are redirected to "www.example.com". What is the most likely issue?',
        'details' => 'Certificate Common Name (CN): example.com | Redirect: www.example.com',
        'options' => [
            'A' => 'Self-signed certificate.',
            'B' => 'Certificate name mismatch.',
            'C' => 'Expired certificate.',
            'D' => 'Unencrypted data transmission.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'A self-signed certificate is unrelated to domain mismatch.',
            'B' => 'Correct. Certificates must match the domain being accessed.',
            'C' => 'An expired certificate is not described in this scenario.',
            'D' => 'TLS ensures encryption; the issue is domain mismatch.',
        ],
    ],
    44 => [
        'domain' => 'Cross-Site Scripting (XSS)',
        'question' => 'A social media site allows users to post comments. By inserting `<script>alert(\'XSS\')</script>`, a user triggers an alert on others’ browsers. What type of XSS is this?',
        'details' => 'Comment Input: <script>alert(\'XSS\')</script>',
        'options' => [
            'A' => 'Reflected XSS.',
            'B' => 'Stored XSS.',
            'C' => 'DOM-Based XSS.',
            'D' => 'Blind XSS.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Reflected XSS does not persist and requires user input triggering.',
            'B' => 'Correct. Stored XSS persists in the application and affects multiple users.',
            'C' => 'DOM-Based XSS is purely client-side.',
            'D' => 'Blind XSS is stored but triggers only when viewed by an administrator or specific user.',
        ],
    ],
    45 => [
        'domain' => 'Server-Side Request Forgery (SSRF)',
        'question' => 'A cloud application allows users to fetch images by URL. An attacker provides a URL pointing to an internal metadata endpoint, retrieving sensitive information. What type of attack is this?',
        'details' => 'Payload: http://169.254.169.254/latest/meta-data/',
        'options' => [
            'A' => 'Server-Side Request Forgery (SSRF).',
            'B' => 'Insecure Direct Object Reference (IDOR).',
            'C' => 'Directory Traversal.',
            'D' => 'Cross-Site Request Forgery (CSRF).',
        ],
        'correct_answer' => 'A',
        'all_explanations' => [
            'A' => 'Correct. SSRF manipulates the server to access internal resources.',
            'B' => 'IDOR exploits object references, unrelated to server requests.',
            'C' => 'Directory traversal targets file paths, not HTTP requests.',
            'D' => 'CSRF exploits user actions, not server requests.',
        ],
    ],
     46 => [
        'domain' => 'Encoding, Encryption, and Hashing',
        'question' => 'A developer hashes passwords using MD5 and stores them in a database. A security auditor flags this as insecure. Why?',
        'details' => 'Hash Algorithm: MD5 | Storage: Database',
        'options' => [
            'A' => 'MD5 is too computationally expensive.',
            'B' => 'MD5 is not a hashing algorithm.',
            'C' => 'MD5 is vulnerable to collision attacks and lacks salting.',
            'D' => 'MD5 is suitable for passwords but not for large datasets.',
        ],
        'correct_answer' => 'C',
        'all_explanations' => [
            'A' => 'MD5 is fast, not computationally expensive.',
            'B' => 'MD5 is a hashing algorithm but is outdated.',
            'C' => 'Correct. MD5 is insecure due to collisions and lacks built-in salting.',
            'D' => 'MD5 is unsuitable for sensitive data like passwords.',
        ],
    ],
    47 => [
        'domain' => 'XML External Entity Attack (XXE)',
        'question' => 'A developer creates an API that accepts XML data for processing. A penetration tester submits a specially crafted payload to access sensitive server files. What measure could prevent this attack?',
         'details' => 'Payload Example: <!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd"> ]><foo>&xxe;</foo>',
        'options' => [
            'A' => 'Sanitizing XML data to remove special characters.',
            'B' => 'Disabling DTD processing in the XML parser.',
            'C' => 'Encrypting the transmitted XML payload.',
            'D' => 'Storing XML data in an isolated database.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Sanitization helps but does not prevent XXE entirely.',
            'B' => 'Correct. Disabling DTD processing eliminates the vulnerability.',
            'C' => 'Encryption protects data in transit but does not mitigate XXE.',
            'D' => 'Isolated storage is unrelated to parsing vulnerabilities.',
        ],
    ],
   48 => [
        'domain' => 'Content-Security-Policy (CSP)',
        'question' => 'An e-commerce site experiences XSS attacks. The security team implements a Content-Security-Policy header to restrict script execution. Which of the following directives is critical for blocking malicious inline scripts?',
         'details' => 'CSP Header Example: Content-Security-Policy: script-src \'self\'',
        'options' => [
            'A' => 'frame-src',
            'B' => 'script-src',
            'C' => 'default-src',
            'D' => 'object-src',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'frame-src controls frame embedding, not script execution.',
            'B' => 'Correct. script-src governs allowed sources for JavaScript.',
            'C' => 'default-src is a fallback directive and may not be specific enough.',
            'D' => 'object-src controls objects like Flash or plugins, not scripts.',
        ],
    ],
    49 => [
         'domain' => 'JWT (JSON Web Token)',
        'question' => 'An application uses JWT for user authentication. A developer mistakenly signs tokens with "none" as the algorithm. What is the primary security risk of this configuration?',
        'details' => 'JWT Example: {"alg":"none","typ":"JWT"}',
        'options' => [
            'A' => 'Tokens can be easily intercepted during transmission.',
            'B' => 'Tokens can be forged by attackers, bypassing authentication.',
            'C' => 'Tokens will expire prematurely, causing denial of service.',
            'D' => 'Tokens will not be compatible with most JWT libraries.',
        ],
        'correct_answer' => 'B',
        'all_explanations' => [
            'A' => 'Interception relates to transport security, not JWT signing.',
            'B' => 'Correct. "none" allows tokens to be forged without verification.',
            'C' => 'Expiration issues are unrelated to the signing algorithm.',
            'D' => 'Most libraries support "none", but it is insecure.',
        ],
    ],
    50 => [
        'domain' => 'Server Information Disclosure',
        'question' => 'A web application returns detailed error messages to users when a database query fails. What is the risk of this behavior?',
        'details' => 'Example Error: "SQLSTATE[42S02]: Base table or view not found: 1146 Table \'users\' doesn\'t exist"',
        'options' => [
            'A' => 'Attackers can deduce the application\'s technology stack.',
            'B' => 'Attackers can exploit other vulnerabilities like SQL Injection.',
            'C' => 'Sensitive information about the database schema may be leaked.',
            'D' => 'All of the above.',
        ],
        'correct_answer' => 'D',
        'all_explanations' => [
            'A' => 'Error messages often reveal server or database details.',
            'B' => 'Detailed messages help attackers craft more precise exploits.',
            'C' => 'Schema details can guide attackers in exploiting vulnerabilities.',
            'D' => 'Correct. All listed risks arise from verbose error messages.',
        ],
    ],
];